c
n
display arr
display tree_node.right.value
display tree_node.left.value
display tree_node.value
quit
display tree_node.left
display tree_node.value
quit
c
n
arr
n
tree_node.value
n
tree_node.left.value
arr
n
tree_node.left.value
n
tree_node.left.value
n
tree_node.left.value
tree_node.value
c
n
(depth(tree_node.left) - depth(tree_node.right)).abs > 1
depth(tree_node.right)
depth(tree_node.right))
depth(tree_node.left)
tree_node.value
s
tree_node.left
n
depth(tree_node.right)
depth(tree_node.left)
tree_node.value
quit
c
n
tree_node.value
n
tree_node.value
n
is_balanced?(tree_node.right)
is_balanced?(tree_node.left)
n
depth(tree_node.right)
depth(tree_node.left)
quit
c
tree_node.value
s
depth(tree_node.left)
tree_node.left
tree_node
c
parent_of_four
n
delete_node
c
n
delete_node
c
@root
delete_node = nil
delete_node
quit
continue
c
n
node
c
n
node
n
node
n
node
n
node.left
node
s
node
value
node
n
node
n
node
n
node
value
n
c
node.left
node
n
node.left
node
value
n
node.value
node
@root
c
node
value
c
node
c
@root
c
n
empty_child(@root, 'left', value)
c
empty_child(@root, 'left', value)
c
tree_node[child]
chi
tree_node
s
c
empty_child(@root.left, value)
value
@root.left
